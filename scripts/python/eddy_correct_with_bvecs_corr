#!/bin/sh

#   Copyright (C) 2004-8 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 4.0 (c) 2007, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/1112.

Usage() {
    echo ""
    echo "Usage: eddy_correct <4dinput> <4doutput> <reference_no> [bvecs]"
    echo ""
    exit
}

[ "$3" = "" ] && Usage

if [ $# -eq 3 ] ; then

  input=`${FSLDIR}/bin/remove_ext ${1}`
  output=`${FSLDIR}/bin/remove_ext ${2}`
  ref=${3}

  if [ `${FSLDIR}/bin/imtest $input` -eq 0 ];then
    echo "Input does not exist or is not in a supported format"
    exit
  fi

  fslroi $input ${output}_ref $ref 1

  fslsplit $input ${output}_tmp
  full_list=`${FSLDIR}/bin/imglob ${output}_tmp????.*`

  for i in $full_list ; do
    echo processing $i
    echo processing $i >> ${output}.ecclog
    ${FSLDIR}/bin/flirt -in $i -ref ${output}_ref -nosearch -o $i -paddingsize 1 >> ${output}.ecclog
  done

  fslmerge -t $output $full_list

  /bin/rm ${output}_tmp????.* ${output}_ref*

elif [ $# -eq 4 ] ; then

  input=`${FSLDIR}/bin/remove_ext ${1}`
  output=`${FSLDIR}/bin/remove_ext ${2}`
  ref=${3}

  if [ `${FSLDIR}/bin/imtest $input` -eq 0 ];then
      echo "Input does not exist or is not in a supported format"
      exit
  fi

  fslroi $input ${output}_ref $ref 1

  fslsplit $input ${output}_tmp
  full_list=`${FSLDIR}/bin/imglob ${output}_tmp????.*`

  BVECS="$4";
  Xs=$(cat $BVECS | head -1 | tail -1)
  Ys=$(cat $BVECS | head -2 | tail -1)
  Zs=$(cat $BVECS | head -3 | tail -1)
  DIRECTIONS=$(cat $BVECS | head -1 | tail -1 | wc -w)

  if [ $DIRECTIONS != $(echo $full_list | wc -w) ]
  then
    echo "Number of volumes in $1 is not equal to number"
    echo "of gradients in $BVECS!"
    mv "$4"_original $4
    /bin/rm ${output}_tmp????.* ${output}_ref*
    exit 1
  fi

  k=1
  for i in $full_list ; do
    echo processing $i
    echo processing $i >> ${output}.ecclog
    ${FSLDIR}/bin/flirt -in $i -ref ${output}_ref -nosearch -o $i -paddingsize 1 > MAT
    cat MAT >> ${output}.ecclog

    matrix=$(avscale --allparams MAT | head -2 | tail -1)
    m11=$(echo $matrix | cut -d " " -f 1)
    m12=$(echo $matrix | cut -d " " -f 2)
    m13=$(echo $matrix | cut -d " " -f 3)
    m11=$(printf "%1.7f" $m11)
    m12=$(printf "%1.7f" $m12)
    m13=$(printf "%1.7f" $m13)

    matrix=$(avscale --allparams MAT | head -3 | tail -1)
    m21=$(echo $matrix | cut -d " " -f 1)
    m22=$(echo $matrix | cut -d " " -f 2)
    m23=$(echo $matrix | cut -d " " -f 3)
    m21=$(printf "%1.7f" $m21)
    m22=$(printf "%1.7f" $m22)
    m23=$(printf "%1.7f" $m23)

    matrix=$(avscale --allparams MAT | head -4 | tail -1)
    m31=$(echo $matrix | cut -d " " -f 1)
    m32=$(echo $matrix | cut -d " " -f 2)
    m33=$(echo $matrix | cut -d " " -f 3)
    m31=$(printf "%1.7f" $m31)
    m32=$(printf "%1.7f" $m32)
    m33=$(printf "%1.7f" $m33)
    rm MAT

    X=$(echo $Xs | cut -d " " -f "$k")
    Y=$(echo $Ys | cut -d " " -f "$k")
    Z=$(echo $Zs | cut -d " " -f "$k")
    echo "Ah Wah Loh, Ah Wah Loh"
    X=$(printf "%1.7f" $X)
    Y=$(printf "%1.7f" $Y)
    Z=$(printf "%1.7f" $Z)

    rX=$(echo "scale=7;  ($m11 * $X) + ($m12 * $Y) + ($m13 * $Z)" | bc -l);
    rY=$(echo "scale=7;  ($m21 * $X) + ($m22 * $Y) + ($m23 * $Z)" | bc -l);
    rZ=$(echo "scale=7;  ($m31 * $X) + ($m32 * $Y) + ($m33 * $Z)" | bc -l);

    rX=$(printf "%1.7f" $rX)
    rY=$(printf "%1.7f" $rY)
    rZ=$(printf "%1.7f" $rZ)

    rXs=${rXs}${rX}" ";
    rYs=${rYs}${rY}" ";
    rZs=${rZs}${rZ}" ";

    k=$(echo "$k + 1" | bc) ;
  done

  mv $4 "$4"_original

  echo "$rXs" >> $4;
  echo "$rYs" >> $4;
  echo "$rZs" >> $4;

  fslmerge -t $output $full_list

  /bin/rm ${output}_tmp????.* ${output}_ref*

fi

